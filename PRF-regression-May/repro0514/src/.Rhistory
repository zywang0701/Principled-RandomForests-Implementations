# training data
n = n
p = 10
X = matrix(runif(n*p, min=-1, max=1), nrow=n)
rm(list=ls())
set.seed(0)
library(rpart)
library(rpart.plot)
library(MASS)
library(intervals)
library(ranger)
library(intervals)
source('sources.R')
# Generate Data -----------------------------------------------------------
L = 3
get.group = function(x){
if(x[1]<=-0.5) return(1)
if(x[1]>-0.5 & x[2]<=0) return(2)
if(x[1]>-0.5 & x[2]>0) return(3)
}
group_mean = c(2, 0.2, -0.2)
# training data
n = n
p = 10
X = matrix(runif(n*p, min=-1, max=1), nrow=n)
set.seed(0)
library(rpart)
library(rpart.plot)
library(MASS)
library(intervals)
library(ranger)
library(intervals)
source('sources.R')
n=1000; p=10
# Generate Data -----------------------------------------------------------
L = 3
get.group = function(x){
if(x[1]<=-0.5) return(1)
if(x[1]>-0.5 & x[2]<=0) return(2)
if(x[1]>-0.5 & x[2]>0) return(3)
}
group_mean = c(2, 0.2, -0.2)
# training data
n = n
p = 10
X = matrix(runif(n*p, min=-1, max=1), nrow=n)
colnames(X) = paste0('X',1:p,seq="")
group = apply(X[1:n,], 1, get.group)
Ystar = group_mean[group]
eps = rnorm(n)
Y = Ystar + eps
n0 = 200
X0 = rbind(# middle point in each subgroup
c(-0.75, 0, runif(p-2, min=-1, max=1)), # 1st
c(0.25, -0.5, runif(p-2, min=-1, max=1)), # 2nd
c(0.25, 0.5, runif(p-2, min=-1, max=1)), # 3rd
# boundary point of subgroup
c(-0.55, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(-0.45, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(0.25, 0.05, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(0.25, -0.05, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(-0.55, 0, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.45, -0.05, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.45, 0.05, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
# far boundary point of subgroup
c(-0.60, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(-0.40, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(0.25, 0.10, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(0.25, -0.10, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(-0.60, 0, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.40, -0.10, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.40, 0.10, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
matrix(runif((n0-17)*p, min=-1, max=1), nrow=n0-17))
colnames(X0)=paste0('X',1:p,seq="")
group0 = apply(X0,1 ,get.group)
Y0star = group_mean[group0]
set.seed(0)
## Post ----
print('-----> Post Procedure ----->')
result.post = post.procedure(X, Y, X0)
cov0.post = (result.post$CI0[,1] <= Y0star)*(result.post$CI0[,2] >= Y0star)
len0.post = result.post$CI0[,2] - result.post$CI0[,1]
names(cov0.post) = names(len0.post) = NULL
## Honest ----
print('-----> Honest Procedure ----->')
result.hon = honest.procedure(X, Y, X0)
cov0.hon = (result.hon$CI0[,1] <= Y0star)*(result.hon$CI0[,2] >= Y0star)
len0.hon = result.hon$CI0[,2] - result.hon$CI0[,1]
names(cov0.hon) = names(len0.hon) = NULL
## PRF ----
print('-----> PRF Procedure ----->')
t1 = Sys.time()
out.PRF = trainPRF(X, Y, M=M)
set.seed(0)
library(rpart)
library(rpart.plot)
library(MASS)
library(intervals)
library(ranger)
library(intervals)
source('sources.R')
n=1000; p=10; M=500
# Generate Data -----------------------------------------------------------
L = 3
get.group = function(x){
if(x[1]<=-0.5) return(1)
if(x[1]>-0.5 & x[2]<=0) return(2)
if(x[1]>-0.5 & x[2]>0) return(3)
}
group_mean = c(2, 0.2, -0.2)
# training data
n = n
p = 10
X = matrix(runif(n*p, min=-1, max=1), nrow=n)
colnames(X) = paste0('X',1:p,seq="")
group = apply(X[1:n,], 1, get.group)
Ystar = group_mean[group]
eps = rnorm(n)
Y = Ystar + eps
n0 = 200
X0 = rbind(# middle point in each subgroup
c(-0.75, 0, runif(p-2, min=-1, max=1)), # 1st
c(0.25, -0.5, runif(p-2, min=-1, max=1)), # 2nd
c(0.25, 0.5, runif(p-2, min=-1, max=1)), # 3rd
# boundary point of subgroup
c(-0.55, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(-0.45, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(0.25, 0.05, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(0.25, -0.05, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(-0.55, 0, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.45, -0.05, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.45, 0.05, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
# far boundary point of subgroup
c(-0.60, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(-0.40, -0.5, runif(p-2, min=-1, max=1)), # 1st & 2nd
c(0.25, 0.10, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(0.25, -0.10, runif(p-2, min=-1, max=1)), # 2nd & 3rd
c(-0.60, 0, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.40, -0.10, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
c(-0.40, 0.10, runif(p-2, min=-1, max=1)), # 1st & 2nd & 3rd
matrix(runif((n0-17)*p, min=-1, max=1), nrow=n0-17))
colnames(X0)=paste0('X',1:p,seq="")
group0 = apply(X0,1 ,get.group)
Y0star = group_mean[group0]
set.seed(0)
## Post ----
print('-----> Post Procedure ----->')
result.post = post.procedure(X, Y, X0)
cov0.post = (result.post$CI0[,1] <= Y0star)*(result.post$CI0[,2] >= Y0star)
len0.post = result.post$CI0[,2] - result.post$CI0[,1]
names(cov0.post) = names(len0.post) = NULL
## Honest ----
print('-----> Honest Procedure ----->')
result.hon = honest.procedure(X, Y, X0)
cov0.hon = (result.hon$CI0[,1] <= Y0star)*(result.hon$CI0[,2] >= Y0star)
len0.hon = result.hon$CI0[,2] - result.hon$CI0[,1]
names(cov0.hon) = names(len0.hon) = NULL
## PRF ----
print('-----> PRF Procedure ----->')
t1 = Sys.time()
out.PRF = trainPRF(X, Y, M=M)
criterions = quantile(out.PRF$cor.vec, probs = c(0, 0.7, 0.8, 0.9))
pass.ind0 = (1:M)[out.PRF$cor.vec >= criterions[1]]
pass.ind7 = (1:M)[out.PRF$cor.vec >= criterions[2]]
pass.ind8 = (1:M)[out.PRF$cor.vec >= criterions[3]]
pass.ind9 = (1:M)[out.PRF$cor.vec >= criterions[4]]
result.PRF0 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind0)
result.PRF7 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind7)
result.PRF8 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind8)
result.PRF9 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind9)
result.PRF9$CI0
length(pass.ind9)
testPRF <- function(X0, trees.list, trees.info, pass.ind){
n0 = nrow(X0)
p = ncol(X0)
colnames(X0) = paste0('X',1:p)
M = length(trees.list)
pass.count = length(pass.ind)
Y0.fit.val = Y0.fit.sd = matrix(NA, nrow=n0, ncol=pass.count)
for(ipass in 1:pass.count){
m = pass.ind[ipass]
fit.m = trees.list[[m]]
mean.vec = trees.info[[m]]$mean.vec
sd.vec = trees.info[[m]]$sd.vec
Y0.fit = rpart.predict(fit.m, data.frame(X0), nn=TRUE)
Y0.fit.val[,ipass] = sapply(Y0.fit$nn, FUN=function(x) mean.vec[as.character(x)])
Y0.fit.sd[,ipass] = sapply(Y0.fit$nn, FUN=function(x) sd.vec[as.character(x)])
}
CI0 <- rep(list(NA), n0)
for(i0 in 1:n0){
CI.mat = matrix(NA, nrow=pass.count, ncol=2); colnames(CI.mat) = c('lower','upper')
for(ipass in 1:pass.count){
CI.mat[ipass,] = c(Y0.fit.val[i0, ipass] - qnorm(0.975)*Y0.fit.sd[i0, ipass],
Y0.fit.val[i0, ipass] + qnorm(0.975)*Y0.fit.sd[i0, ipass])
CI
}
CI.union = as.data.frame(interval_union(Intervals(na.omit(CI.mat))))
CI0[[i0]] = CI.union
}
return(list(Y0.fit.val=Y0.fit.val, CI0 = CI0))
}
result.PRF9 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind9)
testPRF <- function(X0, trees.list, trees.info, pass.ind){
n0 = nrow(X0)
p = ncol(X0)
colnames(X0) = paste0('X',1:p)
M = length(trees.list)
pass.count = length(pass.ind)
Y0.fit.val = Y0.fit.sd = matrix(NA, nrow=n0, ncol=pass.count)
for(ipass in 1:pass.count){
m = pass.ind[ipass]
fit.m = trees.list[[m]]
mean.vec = trees.info[[m]]$mean.vec
sd.vec = trees.info[[m]]$sd.vec
Y0.fit = rpart.predict(fit.m, data.frame(X0), nn=TRUE)
Y0.fit.val[,ipass] = sapply(Y0.fit$nn, FUN=function(x) mean.vec[as.character(x)])
Y0.fit.sd[,ipass] = sapply(Y0.fit$nn, FUN=function(x) sd.vec[as.character(x)])
}
CI0 <- rep(list(NA), n0)
for(i0 in 1:n0){
CI.mat = matrix(NA, nrow=pass.count, ncol=2); colnames(CI.mat) = c('lower','upper')
for(ipass in 1:pass.count){
CI.mat[ipass,] = c(Y0.fit.val[i0, ipass] - qnorm(0.975)*Y0.fit.sd[i0, ipass],
Y0.fit.val[i0, ipass] + qnorm(0.975)*Y0.fit.sd[i0, ipass])
}
CI.union = as.data.frame(interval_union(Intervals(na.omit(CI.mat))))
CI0[[i0]] = CI.union
}
return(list(Y0.fit.val=Y0.fit.val, CI0 = CI0))
}
result.PRF9 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind9)
result.PRF9[10,]
result.PRF9$Y0.fit.val[10,]
data = as.data.frame(cbind(X, Y))
fmla = as.formula(paste('Y~', paste(colnames(X), collapse = '+')))
rf <- ranger(fmla,data=data,num.trees = M, keep.inbag = TRUE)
pred = predict(rf, data=as.data.frame(X0), type='se', se.method='infjack')
pred$predictions
rf <- ranger(fmla,data=data,num.trees = M, predict.all=TRUE, keep.inbag = TRUE)
rf <- ranger(fmla,data=data,num.trees = M, keep.inbag = TRUE)
pred = predict(rf, data=as.data.frame(X0), predict.all=TRUE, type='se', se.method='infjack')
pred$predictions
pred = predict(rf, data=as.data.frame(X0), predict.all=TRUE)#
pred$predictions
pred.all = predict(rf, data=as.data.frame(X0), predict.all = TRUE)
pred = predict(rf, data=as.data.frame(X0), predict.all = TRUE)
dim(pred$predictions)
pred$predictions[10,]
### Pick the 10th observation
prf.pred = result.PRF9$Y0.fit.val[10,]
rf.pred = pred$predictions[10,]
# Plot the histograms using ggplot2
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(position = "dodge", binwidth = 0.1, alpha = 0.7) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
### Pick the 10th observation
prf.pred = result.PRF9$Y0.fit.val[10,]
rf.pred = pred$predictions[10,]
data <- data.frame(
value = c(prf.pred, rf.pred),
group = rep(c("prf.pred", "rf.pred"), times = c(length(prf.pred), length(rf.pred)))
)
# Plot the histograms using ggplot2
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(position = "dodge", binwidth = 0.1, alpha = 0.7) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(position = "dodge", bins=30, alpha = 0.7) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(bins=50, alpha = 0.7) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
result.PRF8 = testPRF(X0, out.PRF$trees.list, out.PRF$trees.info, pass.ind8)
### Pick the 10th observation
prf.pred = result.PRF8$Y0.fit.val[10,]
rf.pred = pred$predictions[10,]
data <- data.frame(
value = c(prf.pred, rf.pred),
group = rep(c("prf.pred", "rf.pred"), times = c(length(prf.pred), length(rf.pred)))
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5) +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.2, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Value",
y = "Count",
fill = "Group") +
theme_minimal()
data <- data.frame(
value = c(prf.pred, rf.pred),
group = rep(c("PRF", "RF"), times = c(length(prf.pred), length(rf.pred)))
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()
data <- data.frame(
value = c(prf.pred, rf.pred),
group = rep(c("PRF", "RF"), times = c(length(prf.pred), length(rf.pred)))
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("prf.pred" = "#E41A1C", "rf.pred" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
labs(title = "Histograms of prf.pred and rf.pred",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = group)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)
### Pick the 10th observation
prf.pred = result.PRF8$Y0.fit.val[10,]
rf.pred = pred$predictions[10,]
data <- data.frame(
value = c(prf.pred, rf.pred),
Method = rep(c("PRF", "RF"), times = c(length(prf.pred), length(rf.pred)))
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)+
labs(title = "Histograms of Individual Trees Estimates of PRF and RF",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)+
labs(title = "Histograms of Individual Trees Estimators for Point (-0.3, 0.2)",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.15, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)+
labs(title = "Histograms of Individual Trees Estimators for X=(-0.3, 0.2)",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1)+
labs(title = "Histograms of Individual Trees Estimators for X=(-0.3, 0.2)",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dotted", color = "black", size = 1)+
labs(title = "Histograms of Individual Trees Estimators for X=(-0.3, 0.2)",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
# Plot the histograms using ggplot2 with specified colors and transparency
ggplot(data, aes(x = value, fill = Method)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = "identity", color='white') +
scale_fill_manual(values = c("PRF" = "#E41A1C", "RF" = "#1F78B4")) +
geom_vline(xintercept = -0.2, linetype = "dashed", color = "black", size = 1.2)+
labs(title = "Histograms of Individual Trees Estimators for X=(-0.3, 0.2)",
x = "Point Estimates of Individual Trees",
y = "Count",
fill = "Method") +
theme_minimal()+
theme(
plot.title = element_text(size = 13, hjust=0.5, face = "bold", colour = "black"),
axis.title.x = element_text(size = 11.5, colour = "black"),
axis.title.y = element_text(size = 11.5, colour = "black")
)
